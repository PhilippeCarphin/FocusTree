#+TITLE:manpage-template

* NAME

The name of this manual page. See man(7) for important details of the line(s) that should follow the .SH NAME command. All words in this line (including the word immediately following the "\-") should be in lowercase, except where English or technical terminological convention dictates otherwise.

* SYNOPSIS

#+begin_src shell
my_command [-o something] [-f] FILE
#+end_src

briefly describes the command or function's interface. For commands, this shows the syntax of the command and its arguments (including options); boldface is used for as-is text and italics are used to indicate replaceable arguments. Brackets ([]) surround optional arguments, vertical bars (|) separate choices, and ellipses (...) can be repeated. For functions, it shows any required data declarations or #include directives, followed by the function declaration.

Where a feature test macro must be defined in order to obtain the declaration of a function (or a variable) from a header file, then the SYNOPSIS should indicate this, as described in feature_test_macros(7).
CONFIGURATION
Configuration details for a device. This section normally only appears in Section 4 pages.

* DESCRIPTION

gives an explanation of what the program, function, or format does. Discuss how it interacts with files and standard input, and what it produces on standard output or standard error. Omit internals and implementation details unless they're critical for understanding the interface. Describe the usual case; for information on command-line options of a program use the OPTIONS section.

* CONFIGURATION      [Normally only in Section 4]

* OPTIONS            [Normally only in Sections 1, 8]

describes the command-line options accepted by a program and how they change its behavior. This section should only appear for Section 1 and 8 manual pages.

** ~-o, --option~

Description of the option.
** ~-f, --flag~

Description of the flag.

* EXIT STATUS [Normally only in Sections 1, 8]

lists the possible exit status values of a program and the conditions that cause these values to be returned. This section should only appear for Section 1 and 8 manual pages.

* RETURN VALUE [Normally only in Sections 2, 3]

For Section 2 and 3 pages, this section gives a list of the values the library routine will return to the caller and the conditions that cause these values to be returned.

* ERRORS [Normally only in Sections 2, 3]

For Section 2 and 3 manual pages, this is a list of the values that may be placed in errno in the event of an error, along with information about the cause of the errors. The error list should be in alphabetical order.

* ENVIRONMENT

lists all environment variables that affect the program or function and how they affect it.

* FILES

lists the files the program or function uses, such as configuration files, startup files, and files the program directly operates on. Give the full pathname of these files, and use the installation process to modify the directory part to match user preferences. For many programs, the default installation location is in /usr/local, so your base manual page should use /usr/local as the base.

* VERSIONS [Normally only in Sections 2, 3]

A brief summary of the Linux kernel or glibc versions where a system call or library function appeared, or changed significantly in its operation. As a general rule, every new interface should include a VERSIONS section in its manual page. Unfortunately, many existing manual pages don't include this information (since there was no policy to do so when they were written). Patches to remedy this are welcome, but, from the perspective of programmers writing new code, this information probably only matters in the case of kernel interfaces that have been added in Linux 2.4 or later (i.e., changes since kernel 2.2), and library functions that have been added to glibc since version 2.1 (i.e., changes since glibc 2.0).

The syscalls(2) manual page also provides information about kernel versions in which various system calls first appeared.
* CONFORMING TO
describes any standards or conventions that relate to the function or command described by the manual page. For a page in Section 2 or 3, this section should note the POSIX.1 version(s) that the call conforms to, and also whether the call is specified in C99. (Don't worry too much about other standards like SUS, SUSv2, and XPG, or the SVr4 and 4.xBSD implementation standards, unless the call was specified in those standards, but isn't in the current version of POSIX.1.) (See standards(7).)

If the call is not governed by any standards but commonly exists on other systems, note them. If the call is Linux-specific, note this.
If this section consists of just a list of standards (which it commonly does), terminate the list with a period ('.').

* NOTES
provides miscellaneous notes. For Section 2 and 3 man pages you may find it useful to include subsections (SS) named Linux Notes and Glibc Notes.

* BUGS

lists limitations, known defects or inconveniences, and other questionable activities.

* EXAMPLE

provides one or more examples describing how this function, file or command is used. For details on writing example programs, see Example Programs below.

* AUTHORS

lists authors of the documentation or program. Use of an AUTHORS section is strongly discouraged. Generally, it is better not to clutter every page with a list of (over time potentially numerous) authors; if you write or significantly amend a page, add a copyright notice as a comment in the source file. If you are the author of a device driver and want to include an address for reporting bugs, place this under the BUGS section.

* SEE ALSO

provides a comma-separated list of related man pages, ordered by section number and then alphabetically by name, possibly followed by other related pages or documents. Do not terminate this with a period.

Where the SEE ALSO list contains many long manual page names, to improve the visual result of the output, it may be useful to employ the .ad l (don't right justify) and .nh (don't hyphenate) directives. Hyphenation of individual page names can be prevented by preceding words with the string "\%".
